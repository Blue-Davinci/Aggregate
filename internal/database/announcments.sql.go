// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: announcments.sql

package database

import (
	"context"
	"database/sql"
)

const getAnnouncmentsForUser = `-- name: GetAnnouncmentsForUser :many
SELECT a.id, a.title, a.message, a.created_at, a.expires_at, a.updated_at, a.created_by, a.is_active, a.urgency
FROM announcements a
LEFT JOIN announcement_reads ar ON a.id = ar.announcement_id AND ar.user_id = $1
WHERE a.is_active = TRUE
  AND ar.id IS NULL
`

func (q *Queries) GetAnnouncmentsForUser(ctx context.Context, userID int64) ([]Announcement, error) {
	rows, err := q.db.QueryContext(ctx, getAnnouncmentsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Announcement
	for rows.Next() {
		var i Announcement
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Message,
			&i.CreatedAt,
			&i.ExpiresAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.IsActive,
			&i.Urgency,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markAnnouncmentAsReadByUser = `-- name: MarkAnnouncmentAsReadByUser :one
INSERT INTO announcement_reads (user_id, announcement_id)
VALUES
  ($1, $2)
RETURNING id, user_id, announcement_id, read_at
`

type MarkAnnouncmentAsReadByUserParams struct {
	UserID         int64
	AnnouncementID sql.NullInt32
}

func (q *Queries) MarkAnnouncmentAsReadByUser(ctx context.Context, arg MarkAnnouncmentAsReadByUserParams) (AnnouncementRead, error) {
	row := q.db.QueryRowContext(ctx, markAnnouncmentAsReadByUser, arg.UserID, arg.AnnouncementID)
	var i AnnouncementRead
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AnnouncementID,
		&i.ReadAt,
	)
	return i, err
}
