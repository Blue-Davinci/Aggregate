// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: limitations.sql

package database

import (
	"context"
)

const getUserLimitations = `-- name: GetUserLimitations :one
WITH user_activities AS (
  SELECT
    u.id AS user_id, 
    COUNT(DISTINCT ff.feed_id) AS followed_feeds,
    COUNT(DISTINCT f.id) AS created_feeds,
    COUNT(DISTINCT c.id) AS comments_today
  FROM
    users u
  LEFT JOIN
    feed_follows ff ON ff.user_id = u.id
  LEFT JOIN
    feeds f ON f.user_id = u.id
  LEFT JOIN
    comments c ON c.user_id = u.id AND DATE(c.created_at) = CURRENT_DATE
  WHERE
    u.id = $1
  GROUP BY
    u.id
)

SELECT user_id, followed_feeds, created_feeds, comments_today FROM user_activities
`

type GetUserLimitationsRow struct {
	UserID        int64
	FollowedFeeds int64
	CreatedFeeds  int64
	CommentsToday int64
}

func (q *Queries) GetUserLimitations(ctx context.Context, id int64) (GetUserLimitationsRow, error) {
	row := q.db.QueryRowContext(ctx, getUserLimitations, id)
	var i GetUserLimitationsRow
	err := row.Scan(
		&i.UserID,
		&i.FollowedFeeds,
		&i.CreatedFeeds,
		&i.CommentsToday,
	)
	return i, err
}
