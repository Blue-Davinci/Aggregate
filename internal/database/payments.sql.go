// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: payments.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
)

const createSubscription = `-- name: CreateSubscription :one
INSERT INTO subscriptions (
		user_id, plan_id, start_date, end_date, price, status, 
		transaction_id, payment_method, authorization_code, 
		card_last4, card_exp_month, card_exp_year, card_type
) VALUES (
	$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13
)
RETURNING id, user_id, plan_id, start_date, end_date, status, transaction_id
`

type CreateSubscriptionParams struct {
	UserID            sql.NullInt32
	PlanID            sql.NullInt32
	StartDate         time.Time
	EndDate           sql.NullTime
	Price             string
	Status            string
	TransactionID     sql.NullString
	PaymentMethod     sql.NullString
	AuthorizationCode sql.NullString
	CardLast4         sql.NullString
	CardExpMonth      sql.NullString
	CardExpYear       sql.NullString
	CardType          sql.NullString
}

type CreateSubscriptionRow struct {
	ID            int32
	UserID        sql.NullInt32
	PlanID        sql.NullInt32
	StartDate     time.Time
	EndDate       sql.NullTime
	Status        string
	TransactionID sql.NullString
}

func (q *Queries) CreateSubscription(ctx context.Context, arg CreateSubscriptionParams) (CreateSubscriptionRow, error) {
	row := q.db.QueryRowContext(ctx, createSubscription,
		arg.UserID,
		arg.PlanID,
		arg.StartDate,
		arg.EndDate,
		arg.Price,
		arg.Status,
		arg.TransactionID,
		arg.PaymentMethod,
		arg.AuthorizationCode,
		arg.CardLast4,
		arg.CardExpMonth,
		arg.CardExpYear,
		arg.CardType,
	)
	var i CreateSubscriptionRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PlanID,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
		&i.TransactionID,
	)
	return i, err
}

const getPaymentPlans = `-- name: GetPaymentPlans :many
SELECT id, name, description, price, features, created_at, updated_at, status
FROM payment_plans
WHERE status = 'active'
`

func (q *Queries) GetPaymentPlans(ctx context.Context) ([]PaymentPlan, error) {
	rows, err := q.db.QueryContext(ctx, getPaymentPlans)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PaymentPlan
	for rows.Next() {
		var i PaymentPlan
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			pq.Array(&i.Features),
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
