// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: payments.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createSubscription = `-- name: CreateSubscription :one
INSERT INTO subscriptions (
		user_id, plan_id, start_date, end_date, price, status, 
		transaction_id, payment_method, authorization_code, 
		card_last4, card_exp_month, card_exp_year, card_type, currency
) VALUES (
	$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14
)
RETURNING id, created_at, updated_at
`

type CreateSubscriptionParams struct {
	UserID            int64
	PlanID            int32
	StartDate         time.Time
	EndDate           time.Time
	Price             string
	Status            string
	TransactionID     int64
	PaymentMethod     sql.NullString
	AuthorizationCode sql.NullString
	CardLast4         sql.NullString
	CardExpMonth      sql.NullString
	CardExpYear       sql.NullString
	CardType          sql.NullString
	Currency          sql.NullString
}

type CreateSubscriptionRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateSubscription(ctx context.Context, arg CreateSubscriptionParams) (CreateSubscriptionRow, error) {
	row := q.db.QueryRowContext(ctx, createSubscription,
		arg.UserID,
		arg.PlanID,
		arg.StartDate,
		arg.EndDate,
		arg.Price,
		arg.Status,
		arg.TransactionID,
		arg.PaymentMethod,
		arg.AuthorizationCode,
		arg.CardLast4,
		arg.CardExpMonth,
		arg.CardExpYear,
		arg.CardType,
		arg.Currency,
	)
	var i CreateSubscriptionRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const getPaymentPlanByID = `-- name: GetPaymentPlanByID :one
SELECT id, name, image, description, duration, price, features, created_at, updated_at, status
FROM payment_plans
WHERE id = $1 AND status = 'active'
`

func (q *Queries) GetPaymentPlanByID(ctx context.Context, id int32) (PaymentPlan, error) {
	row := q.db.QueryRowContext(ctx, getPaymentPlanByID, id)
	var i PaymentPlan
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Image,
		&i.Description,
		&i.Duration,
		&i.Price,
		pq.Array(&i.Features),
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}

const getPaymentPlans = `-- name: GetPaymentPlans :many
SELECT id, name, image, description, duration, price, features, created_at, updated_at, status
FROM payment_plans
WHERE status = 'active'
`

func (q *Queries) GetPaymentPlans(ctx context.Context) ([]PaymentPlan, error) {
	rows, err := q.db.QueryContext(ctx, getPaymentPlans)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PaymentPlan
	for rows.Next() {
		var i PaymentPlan
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Image,
			&i.Description,
			&i.Duration,
			&i.Price,
			pq.Array(&i.Features),
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSubscriptionByID = `-- name: GetSubscriptionByID :one
SELECT id, user_id, plan_id, start_date, end_date, price, status
FROM subscriptions
WHERE user_id = $1 AND status = 'active' AND end_date > NOW()
`

type GetSubscriptionByIDRow struct {
	ID        uuid.UUID
	UserID    int64
	PlanID    int32
	StartDate time.Time
	EndDate   time.Time
	Price     string
	Status    string
}

func (q *Queries) GetSubscriptionByID(ctx context.Context, userID int64) (GetSubscriptionByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getSubscriptionByID, userID)
	var i GetSubscriptionByIDRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PlanID,
		&i.StartDate,
		&i.EndDate,
		&i.Price,
		&i.Status,
	)
	return i, err
}
