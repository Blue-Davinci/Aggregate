// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: rss_posts.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createRssFeedPost = `-- name: CreateRssFeedPost :one
INSERT INTO rssfeed_posts (
    id, 
    created_at, 
    updated_at, 
    channeltitle, 
    channelurl,
    channeldescription,
    channellanguage,
    itemtitle,
    itemdescription, 
    itempublished_at, 
    itemurl, 
    img_url, 
    feed_id
)
VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9, $10, $11, $12, $13)
RETURNING id, created_at, updated_at, channeltitle, channelurl, channeldescription, channellanguage, itemtitle, itemdescription, itempublished_at, itemurl, img_url, feed_id
`

type CreateRssFeedPostParams struct {
	ID                 uuid.UUID
	CreatedAt          time.Time
	UpdatedAt          time.Time
	Channeltitle       string
	Channelurl         sql.NullString
	Channeldescription sql.NullString
	Channellanguage    sql.NullString
	Itemtitle          string
	Itemdescription    sql.NullString
	ItempublishedAt    time.Time
	Itemurl            string
	ImgUrl             string
	FeedID             uuid.UUID
}

func (q *Queries) CreateRssFeedPost(ctx context.Context, arg CreateRssFeedPostParams) (RssfeedPost, error) {
	row := q.db.QueryRowContext(ctx, createRssFeedPost,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Channeltitle,
		arg.Channelurl,
		arg.Channeldescription,
		arg.Channellanguage,
		arg.Itemtitle,
		arg.Itemdescription,
		arg.ItempublishedAt,
		arg.Itemurl,
		arg.ImgUrl,
		arg.FeedID,
	)
	var i RssfeedPost
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Channeltitle,
		&i.Channelurl,
		&i.Channeldescription,
		&i.Channellanguage,
		&i.Itemtitle,
		&i.Itemdescription,
		&i.ItempublishedAt,
		&i.Itemurl,
		&i.ImgUrl,
		&i.FeedID,
	)
	return i, err
}

const getFollowedRssPostsForUser = `-- name: GetFollowedRssPostsForUser :many
SELECT count(*) OVER(), rssfeed_posts.id, rssfeed_posts.created_at, rssfeed_posts.updated_at, rssfeed_posts.channeltitle, rssfeed_posts.channelurl, rssfeed_posts.channeldescription, rssfeed_posts.channellanguage, rssfeed_posts.itemtitle, rssfeed_posts.itemdescription, rssfeed_posts.itempublished_at, rssfeed_posts.itemurl, rssfeed_posts.img_url, rssfeed_posts.feed_id from rssfeed_posts
JOIN feed_follows ON rssfeed_posts.feed_id = feed_follows.feed_id
WHERE feed_follows.user_id = $1
ORDER BY rssfeed_posts.itempublished_at DESC
LIMIT $2 OFFSET $3
`

type GetFollowedRssPostsForUserParams struct {
	UserID int64
	Limit  int32
	Offset int32
}

type GetFollowedRssPostsForUserRow struct {
	Count              int64
	ID                 uuid.UUID
	CreatedAt          time.Time
	UpdatedAt          time.Time
	Channeltitle       string
	Channelurl         sql.NullString
	Channeldescription sql.NullString
	Channellanguage    sql.NullString
	Itemtitle          string
	Itemdescription    sql.NullString
	ItempublishedAt    time.Time
	Itemurl            string
	ImgUrl             string
	FeedID             uuid.UUID
}

func (q *Queries) GetFollowedRssPostsForUser(ctx context.Context, arg GetFollowedRssPostsForUserParams) ([]GetFollowedRssPostsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFollowedRssPostsForUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFollowedRssPostsForUserRow
	for rows.Next() {
		var i GetFollowedRssPostsForUserRow
		if err := rows.Scan(
			&i.Count,
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Channeltitle,
			&i.Channelurl,
			&i.Channeldescription,
			&i.Channellanguage,
			&i.Itemtitle,
			&i.Itemdescription,
			&i.ItempublishedAt,
			&i.Itemurl,
			&i.ImgUrl,
			&i.FeedID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
