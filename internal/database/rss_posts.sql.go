// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: rss_posts.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createRSSFavoritePost = `-- name: CreateRSSFavoritePost :one
INSERT INTO postfavorites (post_id, feed_id, user_id, created_at)
VALUES ($1, $2, $3, $4)
RETURNING id, post_id, feed_id, user_id, created_at
`

type CreateRSSFavoritePostParams struct {
	PostID    uuid.UUID
	FeedID    uuid.UUID
	UserID    int64
	CreatedAt time.Time
}

func (q *Queries) CreateRSSFavoritePost(ctx context.Context, arg CreateRSSFavoritePostParams) (Postfavorite, error) {
	row := q.db.QueryRowContext(ctx, createRSSFavoritePost,
		arg.PostID,
		arg.FeedID,
		arg.UserID,
		arg.CreatedAt,
	)
	var i Postfavorite
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.FeedID,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const createRssFeedPost = `-- name: CreateRssFeedPost :one
INSERT INTO rssfeed_posts (
    id, 
    created_at, 
    updated_at, 
    channeltitle, 
    channelurl,
    channeldescription,
    channellanguage,
    itemtitle,
    itemdescription, 
    itempublished_at, 
    itemurl, 
    img_url, 
    feed_id
)
VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9, $10, $11, $12, $13)
RETURNING id, created_at, updated_at, channeltitle, channelurl, channeldescription, channellanguage, itemtitle, itemdescription, itempublished_at, itemurl, img_url, feed_id
`

type CreateRssFeedPostParams struct {
	ID                 uuid.UUID
	CreatedAt          time.Time
	UpdatedAt          time.Time
	Channeltitle       string
	Channelurl         sql.NullString
	Channeldescription sql.NullString
	Channellanguage    sql.NullString
	Itemtitle          string
	Itemdescription    sql.NullString
	ItempublishedAt    time.Time
	Itemurl            string
	ImgUrl             string
	FeedID             uuid.UUID
}

func (q *Queries) CreateRssFeedPost(ctx context.Context, arg CreateRssFeedPostParams) (RssfeedPost, error) {
	row := q.db.QueryRowContext(ctx, createRssFeedPost,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Channeltitle,
		arg.Channelurl,
		arg.Channeldescription,
		arg.Channellanguage,
		arg.Itemtitle,
		arg.Itemdescription,
		arg.ItempublishedAt,
		arg.Itemurl,
		arg.ImgUrl,
		arg.FeedID,
	)
	var i RssfeedPost
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Channeltitle,
		&i.Channelurl,
		&i.Channeldescription,
		&i.Channellanguage,
		&i.Itemtitle,
		&i.Itemdescription,
		&i.ItempublishedAt,
		&i.Itemurl,
		&i.ImgUrl,
		&i.FeedID,
	)
	return i, err
}

const deleteRSSFavoritePost = `-- name: DeleteRSSFavoritePost :exec
DELETE FROM postfavorites
WHERE post_id = $1 AND user_id = $2
`

type DeleteRSSFavoritePostParams struct {
	PostID uuid.UUID
	UserID int64
}

func (q *Queries) DeleteRSSFavoritePost(ctx context.Context, arg DeleteRSSFavoritePostParams) error {
	_, err := q.db.ExecContext(ctx, deleteRSSFavoritePost, arg.PostID, arg.UserID)
	return err
}

const getFollowedRssPostsForUser = `-- name: GetFollowedRssPostsForUser :many
SELECT count(*) OVER(), rssfeed_posts.id, rssfeed_posts.created_at, rssfeed_posts.updated_at, rssfeed_posts.channeltitle, rssfeed_posts.channelurl, rssfeed_posts.channeldescription, rssfeed_posts.channellanguage, rssfeed_posts.itemtitle, rssfeed_posts.itemdescription, rssfeed_posts.itempublished_at, rssfeed_posts.itemurl, rssfeed_posts.img_url, rssfeed_posts.feed_id from rssfeed_posts
JOIN feed_follows ON rssfeed_posts.feed_id = feed_follows.feed_id
WHERE feed_follows.user_id = $1
ORDER BY rssfeed_posts.itempublished_at DESC
LIMIT $2 OFFSET $3
`

type GetFollowedRssPostsForUserParams struct {
	UserID int64
	Limit  int32
	Offset int32
}

type GetFollowedRssPostsForUserRow struct {
	Count              int64
	ID                 uuid.UUID
	CreatedAt          time.Time
	UpdatedAt          time.Time
	Channeltitle       string
	Channelurl         sql.NullString
	Channeldescription sql.NullString
	Channellanguage    sql.NullString
	Itemtitle          string
	Itemdescription    sql.NullString
	ItempublishedAt    time.Time
	Itemurl            string
	ImgUrl             string
	FeedID             uuid.UUID
}

func (q *Queries) GetFollowedRssPostsForUser(ctx context.Context, arg GetFollowedRssPostsForUserParams) ([]GetFollowedRssPostsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFollowedRssPostsForUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFollowedRssPostsForUserRow
	for rows.Next() {
		var i GetFollowedRssPostsForUserRow
		if err := rows.Scan(
			&i.Count,
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Channeltitle,
			&i.Channelurl,
			&i.Channeldescription,
			&i.Channellanguage,
			&i.Itemtitle,
			&i.Itemdescription,
			&i.ItempublishedAt,
			&i.Itemurl,
			&i.ImgUrl,
			&i.FeedID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRSSFavoritePostsForUser = `-- name: GetRSSFavoritePostsForUser :many
SELECT id, post_id, feed_id, user_id, created_at
FROM postfavorites
WHERE user_id = $1
`

func (q *Queries) GetRSSFavoritePostsForUser(ctx context.Context, userID int64) ([]Postfavorite, error) {
	rows, err := q.db.QueryContext(ctx, getRSSFavoritePostsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Postfavorite
	for rows.Next() {
		var i Postfavorite
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.FeedID,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRSSFavoritePostsOnlyForUser = `-- name: GetRSSFavoritePostsOnlyForUser :many
SELECT count(*) OVER(),
    p.id,
    p.created_at,
    p.updated_at,
    p.channeltitle,
    p.channelurl,
    p.channeldescription,
    p.channellanguage,
    p.itemtitle,
    p.itemdescription,
    p.itempublished_at,
    p.itemurl,
    p.img_url,
    p.feed_id
FROM 
    rssfeed_posts p
JOIN 
    postfavorites f ON p.id = f.post_id
WHERE 
    f.user_id = $1
ORDER BY p.created_at DESC
LIMIT $2 OFFSET $3
`

type GetRSSFavoritePostsOnlyForUserParams struct {
	UserID int64
	Limit  int32
	Offset int32
}

type GetRSSFavoritePostsOnlyForUserRow struct {
	Count              int64
	ID                 uuid.UUID
	CreatedAt          time.Time
	UpdatedAt          time.Time
	Channeltitle       string
	Channelurl         sql.NullString
	Channeldescription sql.NullString
	Channellanguage    sql.NullString
	Itemtitle          string
	Itemdescription    sql.NullString
	ItempublishedAt    time.Time
	Itemurl            string
	ImgUrl             string
	FeedID             uuid.UUID
}

func (q *Queries) GetRSSFavoritePostsOnlyForUser(ctx context.Context, arg GetRSSFavoritePostsOnlyForUserParams) ([]GetRSSFavoritePostsOnlyForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getRSSFavoritePostsOnlyForUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRSSFavoritePostsOnlyForUserRow
	for rows.Next() {
		var i GetRSSFavoritePostsOnlyForUserRow
		if err := rows.Scan(
			&i.Count,
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Channeltitle,
			&i.Channelurl,
			&i.Channeldescription,
			&i.Channellanguage,
			&i.Itemtitle,
			&i.Itemdescription,
			&i.ItempublishedAt,
			&i.Itemurl,
			&i.ImgUrl,
			&i.FeedID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
