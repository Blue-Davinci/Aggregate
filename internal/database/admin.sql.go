// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: admin.sql

package database

import (
	"context"
	"time"
)

const adminGetAllUsers = `-- name: AdminGetAllUsers :many
SELECT
    u.id,
    u.created_at,
    u.name,
    u.email,
    u.password_hash,
    u.activated,
    u.version,
    u.user_img,
    COALESCE(
        NULLIF(array_agg(p.code::TEXT ORDER BY p.id), '{}'), 
        ARRAY['normal user']
    ) AS permissions,
    COUNT(*) OVER() AS total_count
FROM
    public.users u
LEFT JOIN
    users_permissions up ON up.user_id = u.id
LEFT JOIN
    permissions p ON p.id = up.permission_id
WHERE
    ($1 = '' OR to_tsvector('simple', u.name) @@ plainto_tsquery('simple', $1))
GROUP BY
    u.id, u.created_at, u.name, u.email, u.password_hash, u.activated, u.version, u.user_img
ORDER BY
    u.created_at DESC
LIMIT $2 OFFSET $3
`

type AdminGetAllUsersParams struct {
	Column1 interface{}
	Limit   int32
	Offset  int32
}

type AdminGetAllUsersRow struct {
	ID           int64
	CreatedAt    time.Time
	Name         string
	Email        string
	PasswordHash []byte
	Activated    bool
	Version      int32
	UserImg      string
	Permissions  interface{}
	TotalCount   int64
}

func (q *Queries) AdminGetAllUsers(ctx context.Context, arg AdminGetAllUsersParams) ([]AdminGetAllUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, adminGetAllUsers, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AdminGetAllUsersRow
	for rows.Next() {
		var i AdminGetAllUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Name,
			&i.Email,
			&i.PasswordHash,
			&i.Activated,
			&i.Version,
			&i.UserImg,
			&i.Permissions,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const adminGetStatistics = `-- name: AdminGetStatistics :one
WITH
user_stats AS (
    SELECT
        COUNT(*) AS total_users,
        COUNT(*) FILTER (WHERE activated = true) AS active_users,
        COUNT(*) FILTER (WHERE created_at >= now() - INTERVAL '7 days') AS new_signups
    FROM users
),
subscription_stats AS (
    SELECT
        COALESCE(SUM(price), 0)::numeric AS total_revenue,
        COUNT(*) FILTER (WHERE status = 'active') AS active_subscriptions,
        COUNT(*) FILTER (WHERE status = 'cancelled') AS cancelled_subscriptions,
        COUNT(*) FILTER (WHERE status = 'expired') AS expired_subscriptions,
        COALESCE(
            (SELECT payment_method FROM subscriptions
            GROUP BY payment_method
            ORDER BY COUNT(*) DESC
            LIMIT 1),
            'N/A'
        ) AS most_used_payment_method
    FROM subscriptions
),
comment_stats AS (
    SELECT
        COUNT(*) AS total_comments,
        COUNT(*) FILTER (WHERE created_at >= now() - INTERVAL '7 days') AS recent_comments
    FROM comments
)
SELECT
    us.total_users,
    us.active_users,
    us.new_signups,
    ss.total_revenue,
    ss.active_subscriptions,
    ss.cancelled_subscriptions,
    ss.expired_subscriptions,
    ss.most_used_payment_method,
    cs.total_comments,
    cs.recent_comments
FROM user_stats us, subscription_stats ss, comment_stats cs
`

type AdminGetStatisticsRow struct {
	TotalUsers             int64
	ActiveUsers            int64
	NewSignups             int64
	TotalRevenue           string
	ActiveSubscriptions    int64
	CancelledSubscriptions int64
	ExpiredSubscriptions   int64
	MostUsedPaymentMethod  interface{}
	TotalComments          int64
	RecentComments         int64
}

// Get statistics from the users table
// Get statistics from the subscriptions table
// Get statistics from the comments table
// Combine all the statistics
func (q *Queries) AdminGetStatistics(ctx context.Context) (AdminGetStatisticsRow, error) {
	row := q.db.QueryRowContext(ctx, adminGetStatistics)
	var i AdminGetStatisticsRow
	err := row.Scan(
		&i.TotalUsers,
		&i.ActiveUsers,
		&i.NewSignups,
		&i.TotalRevenue,
		&i.ActiveSubscriptions,
		&i.CancelledSubscriptions,
		&i.ExpiredSubscriptions,
		&i.MostUsedPaymentMethod,
		&i.TotalComments,
		&i.RecentComments,
	)
	return i, err
}
