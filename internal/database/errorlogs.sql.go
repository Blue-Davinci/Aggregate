// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: errorlogs.sql

package database

import (
	"context"
	"database/sql"
)

const createScraperErrorLog = `-- name: CreateScraperErrorLog :one
INSERT INTO scraper_error_logs (
    error_type, message, feed_url, status_code, retry_attempts, admin_notified, resolved, resolution_notes, occurred_at, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, NOW(), NOW()
)
ON CONFLICT (error_type, feed_url)
DO UPDATE SET
    occurrence_count = scraper_error_logs.occurrence_count + 1,
    last_occurrence = NOW(),
    retry_attempts = scraper_error_logs.retry_attempts + 1,
    updated_at = NOW(),
    message = EXCLUDED.message, -- Optionally update message
    status_code = EXCLUDED.status_code -- Optionally update status code
RETURNING id, created_at, updated_at, occurrence_count, last_occurrence
`

type CreateScraperErrorLogParams struct {
	ErrorType       string
	Message         sql.NullString
	FeedUrl         sql.NullString
	StatusCode      sql.NullInt32
	RetryAttempts   sql.NullInt32
	AdminNotified   sql.NullBool
	Resolved        sql.NullBool
	ResolutionNotes sql.NullString
	OccurredAt      sql.NullTime
}

type CreateScraperErrorLogRow struct {
	ID              int32
	CreatedAt       sql.NullTime
	UpdatedAt       sql.NullTime
	OccurrenceCount sql.NullInt32
	LastOccurrence  sql.NullTime
}

func (q *Queries) CreateScraperErrorLog(ctx context.Context, arg CreateScraperErrorLogParams) (CreateScraperErrorLogRow, error) {
	row := q.db.QueryRowContext(ctx, createScraperErrorLog,
		arg.ErrorType,
		arg.Message,
		arg.FeedUrl,
		arg.StatusCode,
		arg.RetryAttempts,
		arg.AdminNotified,
		arg.Resolved,
		arg.ResolutionNotes,
		arg.OccurredAt,
	)
	var i CreateScraperErrorLogRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OccurrenceCount,
		&i.LastOccurrence,
	)
	return i, err
}

const deleteScraperErrorLogByID = `-- name: DeleteScraperErrorLogByID :exec
DELETE FROM scraper_error_logs
WHERE 
    id = $1
`

func (q *Queries) DeleteScraperErrorLogByID(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteScraperErrorLogByID, id)
	return err
}

const getAllScraperErrorLogs = `-- name: GetAllScraperErrorLogs :many
SELECT 
    COUNT(*) OVER() AS total_count,
    id, error_type, message, feed_url, occurred_at, status_code, retry_attempts, admin_notified, resolved, resolution_notes, created_at, updated_at, occurrence_count, last_occurrence
FROM 
    scraper_error_logs
ORDER BY 
    occurred_at DESC
LIMIT $1 OFFSET $2
`

type GetAllScraperErrorLogsParams struct {
	Limit  int32
	Offset int32
}

type GetAllScraperErrorLogsRow struct {
	TotalCount      int64
	ID              int32
	ErrorType       string
	Message         sql.NullString
	FeedUrl         sql.NullString
	OccurredAt      sql.NullTime
	StatusCode      sql.NullInt32
	RetryAttempts   sql.NullInt32
	AdminNotified   sql.NullBool
	Resolved        sql.NullBool
	ResolutionNotes sql.NullString
	CreatedAt       sql.NullTime
	UpdatedAt       sql.NullTime
	OccurrenceCount sql.NullInt32
	LastOccurrence  sql.NullTime
}

func (q *Queries) GetAllScraperErrorLogs(ctx context.Context, arg GetAllScraperErrorLogsParams) ([]GetAllScraperErrorLogsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllScraperErrorLogs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllScraperErrorLogsRow
	for rows.Next() {
		var i GetAllScraperErrorLogsRow
		if err := rows.Scan(
			&i.TotalCount,
			&i.ID,
			&i.ErrorType,
			&i.Message,
			&i.FeedUrl,
			&i.OccurredAt,
			&i.StatusCode,
			&i.RetryAttempts,
			&i.AdminNotified,
			&i.Resolved,
			&i.ResolutionNotes,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.OccurrenceCount,
			&i.LastOccurrence,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getScraperErrorLogByID = `-- name: GetScraperErrorLogByID :one
SELECT 
    id, error_type, message, feed_url, occurred_at, status_code, retry_attempts, admin_notified, resolved, resolution_notes, created_at, updated_at, occurrence_count, last_occurrence
FROM 
    scraper_error_logs
WHERE 
    id = $1
`

func (q *Queries) GetScraperErrorLogByID(ctx context.Context, id int32) (ScraperErrorLog, error) {
	row := q.db.QueryRowContext(ctx, getScraperErrorLogByID, id)
	var i ScraperErrorLog
	err := row.Scan(
		&i.ID,
		&i.ErrorType,
		&i.Message,
		&i.FeedUrl,
		&i.OccurredAt,
		&i.StatusCode,
		&i.RetryAttempts,
		&i.AdminNotified,
		&i.Resolved,
		&i.ResolutionNotes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OccurrenceCount,
		&i.LastOccurrence,
	)
	return i, err
}
